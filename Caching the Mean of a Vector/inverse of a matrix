makeCacheMatrix <- function(x = matrix()) {
-  invMatrix <- NULL
-  
-#set the value of the vector
get the value of the vector
set the value of the mean
get the value of the mean


-  setMatrix <- function(y) {
-    x <<- y
-    invMatrix <<- NULL
-  }
-  
-  getMatrix <- function() x                              #get the value of the Matrix
-  setInverse <- function(inverse) invMatrix <<- inverse  #set the value of the invertible matrix
-  getInverse <- function() invMatrix                     #get the value of the invertible matrix
-  list(setMatrix = setMatrix, getMatrix = getMatrix,
-       setInverse = setInverse, getInverse = getInverse)
 
 }
 
 cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}





#Caching the Inverse of a Matrix

## A pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y){
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setInverse <- function(solveMatrix) inv <<- solveMatrix
  getInverse <- function() inv
  list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}

## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
  ## Return a matrix that is the inverse of 'x'
  inv <- x$getInverse()
  if(!is.null(inv)){
    message("getting cached data")
    return(inv)
  }
  data <- x$get()
  inv <- solve(data)
  x$setInverse(inv)
  inv      
}
